plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id("org.jetbrains.dokka") version "2.0.0"
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'com.palantir.git-version' version '3.1.0'
    id 'jacoco'
}

apply from: 'hooks.gradle'

group = 'io.github.lsd-consulting'
version = gitVersion().replaceAll("^v", "")

repositories {
    mavenLocal()
    mavenCentral()
}

kotlin {
    jvmToolchain(17)
}

dependencies {
    api 'io.github.lsd-consulting:lsd-core:7.0.69'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.11.4'

    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'com.approvaltests:approvaltests:24.17.0'
    testImplementation 'org.mockito:mockito-core:5.16.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.12.0'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("reports/coverage")
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

java {
    withSourcesJar()
}

tasks.register('javadocJar', Jar) {
    dependsOn(dokkaJavadoc)
    archiveClassifier = 'javadoc'
    from dokkaHtml.outputDirectory
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "$group"
            artifactId = 'lsd-junit5'
            version = "${version}"

            from components.kotlin
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'lsd-junit5'
                description = 'A library providing a Junit5 extension for generating LSD reports'
                url = 'https://github.com/lsd-consulting/lsd-junit5.git'
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/lsd-consulting/lsd-junit5/blob/main/LICENSE"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Nick"
                        email = "nicholas.mcdowall@gmail.com"
                        organization = 'NKM IT Solutions'
                        organizationUrl = 'https://github.com/nickmcdowall'
                    }
                    developer {
                        name = "Lukasz"
                        email = "lukasz.gryzbon@gmail.com"
                        organization = 'Integreety Ltd.'
                        organizationUrl = 'https://github.com/integreety'
                    }
                }
                scm {
                    url = "https://github.com/lsd-consulting/lsd-junit5.git"
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials(PasswordCredentials)
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    if (project.findProperty("signingKey")) {
        // Use in-memory ascii-armored keys
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    } else {
        // Use signing properties in ~/.gradle/gradle.properties
        sign publishing.publications.mavenJava
    }
}
